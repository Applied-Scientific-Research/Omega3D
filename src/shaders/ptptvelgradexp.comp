R"(
#version 430
//
// ptptvelgradexp.comp - compute vels and vel gradients for a batch of particles
//                       using the compact exponential function
//
// (c)2019 Applied Scientific Research, Inc.
//         Mark J. Stock <markjstock@gmail.com>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
layout(local_size_x=128) in;

layout(location = 0) uniform uint isrc;
layout(location = 1) uniform uint nsrc;
layout(location = 2) uniform uint itarg;
layout(location = 3) uniform uint ntarg;
layout(std430, binding=0) restrict readonly buffer _sx { vec4 sx[]; };
layout(std430, binding=1) restrict readonly buffer _ss { vec4 ss[]; };
layout(std430, binding=2) restrict readonly buffer _tx { vec4 tx[]; };
layout(std430, binding=3) restrict          buffer _t1 { vec4 t1[]; };
layout(std430, binding=4) restrict          buffer _t2 { vec4 t2[]; };
layout(std430, binding=5) restrict          buffer _t3 { vec4 t3[]; };

shared vec4 tmppos[gl_WorkGroupSize.x];
shared vec4 tmpstr[gl_WorkGroupSize.x];

void main() {
   //uint ntarg = uint(gl_NumWorkGroups.x*gl_WorkGroupSize.x);
   uint tidx = itarg + uint(gl_GlobalInvocationID);
   vec4 targpos = tx[tidx];
   vec4 newv1 = vec4(0.f);
   vec4 newv2 = vec4(0.f);
   vec4 newv3 = vec4(0.f);
   for (uint stile=isrc; stile<isrc+nsrc; stile+=uint(gl_WorkGroupSize.x)) {
      uint sidx = stile + uint(gl_LocalInvocationIndex);
      tmppos[gl_LocalInvocationIndex] = sx[sidx];
      tmpstr[gl_LocalInvocationIndex] = ss[sidx];
      groupMemoryBarrier();
      barrier();
      // each inner loop interation is likely 77 flops
      for (uint i=0; i<gl_WorkGroupSize.x && stile+i<isrc+nsrc; ++i) {
         // prepare the main vars (3 flops)
         vec3 str = tmpstr[i].xyz;
         vec3 diff = targpos.xyz - tmppos[i].xyz;
         // work on the core function (14 flops here)
         float d2 = diff.x*diff.x + diff.y*diff.y + diff.z*diff.z;
         float d1 = sqrt(d2);
         float corefac = 1.f / (tmppos[i].w*tmppos[i].w*tmppos[i].w + targpos.w*targpos.w*targpos.w);
         float d3 = d2 * d1;
         float reld3 = d3 * corefac;
         // the ugly conditionals (12 flops if 1st and 3rd area always done)
         float r3,bbb;
         if (reld3 > 16.f) {
            r3 = 1.f / d3;
            bbb = -3.f / (d3 * d2);
         } else if (reld3 < 0.001f) {
            r3 = corefac;
            bbb = -1.5f * d1 * corefac * corefac;
         } else {
            float expreld3 = exp(-reld3);
            r3 = (1.f - expreld3) / d3;
            bbb = 3.f * (corefac*expreld3 - r3) / d2;
         }
         // find the velocities (15 flops here)
         float dxxw = diff.z*str.y - diff.y*str.z;
         float dyxw = diff.x*str.z - diff.z*str.x;
         float dzxw = diff.y*str.x - diff.x*str.y;
         newv1.x += r3 * dxxw;
         newv1.y += r3 * dyxw;
         newv1.z += r3 * dzxw;
         // now the vel grads (33 flops here)
         dxxw *= bbb;
         dyxw *= bbb;
         dzxw *= bbb;
         newv1.w += diff.x*dxxw;
         newv2.x += diff.x*dyxw + str.z*r3;
         newv2.y += diff.x*dzxw - str.y*r3;
         newv2.z += diff.y*dxxw - str.z*r3;
         newv2.w += diff.y*dyxw;
         newv3.x += diff.y*dzxw + str.x*r3;
         newv3.y += diff.z*dxxw + str.y*r3;
         newv3.z += diff.z*dyxw - str.x*r3;
         newv3.w += diff.z*dzxw;
      }
      groupMemoryBarrier();
      barrier();
   }
   // scale vels by 1/4pi later
   if (isrc == 0) {
      // this is the first call, zero the vels
      t1[tidx] = newv1;
      t2[tidx] = newv2;
      t3[tidx] = newv3;
   } else {
      // accumulate the results
      t1[tidx] += newv1;
      t2[tidx] += newv2;
      t3[tidx] += newv3;
   }
}
)"
