R"(
#version 430
layout(local_size_x=128) in;

layout(location = 0) uniform int isrc;
layout(location = 1) uniform int nsrc;
layout(location = 2) uniform int itarg;
layout(location = 3) uniform int ntarg;
layout(std430, binding=0) restrict readonly buffer _sx { vec4 sx[]; };
layout(std430, binding=1) restrict readonly buffer _ss { vec4 ss[]; };
layout(std430, binding=2) restrict readonly buffer _tx { vec4 tx[]; };
layout(std430, binding=3) restrict          buffer _t1 { vec4 t1[]; };
layout(std430, binding=4) restrict          buffer _t2 { vec4 t2[]; };
layout(std430, binding=5) restrict          buffer _t3 { vec4 t3[]; };

shared vec4 tmppos[gl_WorkGroupSize.x];
shared vec4 tmpstr[gl_WorkGroupSize.x];

void main() {
   //int ntarg = int(gl_NumWorkGroups.x*gl_WorkGroupSize.x);
   int tidx = itarg + int(gl_GlobalInvocationID);
   vec4 targpos = tx[tidx];
   vec4 newv1 = vec4(0.f);
   vec4 newv2 = vec4(0.f);
   vec4 newv3 = vec4(0.f);
   for (int stile = isrc; stile<nsrc; stile+=int(gl_WorkGroupSize.x)) {
       int sidx = stile + int(gl_LocalInvocationIndex);
       tmppos[gl_LocalInvocationIndex] = sx[sidx];
       tmpstr[gl_LocalInvocationIndex] = ss[sidx];
       groupMemoryBarrier();
       barrier();
       for (int i=0; i<gl_WorkGroupSize.x && stile+i<nsrc; ++i) {
           vec3 str = tmpstr[i].xyz;
           vec3 diff = tmppos[i].xyz - targpos.xyz;
           float r2 = diff.x*diff.x + diff.y*diff.y + diff.z*diff.z + tmppos[i].w*tmppos[i].w + targpos.w*targpos.w;
           float r3 = 1.f / (r2*sqrt(r2));
           float dxxw = diff.z*str.y - diff.y*str.z;
           float dyxw = diff.x*str.z - diff.z*str.x;
           float dzxw = diff.y*str.x - diff.x*str.y;
           newv1.x += r3 * dxxw;
           newv1.y += r3 * dyxw;
           newv1.z += r3 * dzxw;
           // now the vel grads
           float bbb = -3.f * r3 / r2;
           dxxw *= bbb;
           dyxw *= bbb;
           dzxw *= bbb;
           newv1.w += diff.x*dxxw;
           newv2.x += diff.x*dyxw + str.z*r3;
           newv2.y += diff.x*dzxw - str.y*r3;
           newv2.z += diff.y*dxxw - str.z*r3;
           newv2.w += diff.y*dyxw;
           newv3.x += diff.y*dzxw + str.x*r3;
           newv3.y += diff.z*dxxw + str.y*r3;
           newv3.z += diff.z*dyxw - str.x*r3;
           newv3.w += diff.z*dzxw;
       }
       groupMemoryBarrier();
       barrier();
   }
   // scale vels by 1/4pi later
   t1[tidx] = newv1;
   t2[tidx] = newv2;
   t3[tidx] = newv3;
}
)"
